import duckdb, pandas as pd

# ── 1. your dataframes ────────────────────────────────────────────────────────
df_sales   = pd.DataFrame({"id":[1,2], "amount":[100.0,250.5],
                           "ts":pd.to_datetime(["2025-07-08","2025-07-09"])})
df_customers = pd.DataFrame({"cid":[10,11], "name":["Asha","Bruno"], "vip":[True,False]})

dfs = [("sales", df_sales),
       ("customers", df_customers)]          # (table_name, dataframe)

# ── 2. open / create a DuckDB file ────────────────────────────────────────────
con = duckdb.connect("my_data.duckdb")       # or ":memory:"

# ── 3. load every DataFrame → table ───────────────────────────────────────────
for tbl, df in dfs:
    tmp = f"_tmp_{tbl}"                      # unique temp view name
    con.register(tmp, df)                    # ① DF is now a view
    con.execute(f"CREATE OR REPLACE TABLE {tbl} AS SELECT * FROM {tmp}")
    con.unregister(tmp)                      # ② tidy up (optional)

# ── 4. pull the schema for all user tables ────────────────────────────────────
schema = con.execute("""
    SELECT table_name   AS table,
           column_name  AS column,
           data_type
    FROM information_schema.columns
    WHERE table_schema = 'main'
    ORDER BY table, ordinal_position
""").fetchdf()                               # <- returns a pandas DataFrame

# ── 5. pretty-print ───────────────────────────────────────────────────────────
for tbl, grp in schema.groupby("table", sort=False):
    print(f"\n=== {tbl} ===")
    for _, row in grp.iterrows():
        print(f"{row['column']:>20} : {row['data_type']}")
