import duckdb, pandas as pd

# ── 1. Your list of dataframes ────────────────────────────────────────────────
df_sales   = pd.DataFrame({"id":[1,2],"amount":[100.0,250.5],"ts":pd.to_datetime(["2025-07-08","2025-07-09"])})
df_customers = pd.DataFrame({"cid":[10,11],"name":["Asha","Bruno"],"vip":[True,False]})

dfs = [("sales", df_sales),
       ("customers", df_customers)]          # ← give each dataframe a target table name

# ── 2. Open (or create) a DuckDB file ─────────────────────────────────────────
con = duckdb.connect("my_data.duckdb")       # or ":memory:" for temp only

# ── 3. Push every DataFrame into a persistent DuckDB table ────────────────────
for tbl, df in dfs:
    # simplest: turn the DF into a temporary relation, then copy to a table
    (duckdb
     .from_df(df)                            # create relation
     .create_or_replace_view(f"tmp_{tbl}"))  # view name avoids clashes
    con.execute(f"CREATE OR REPLACE TABLE {tbl} AS SELECT * FROM tmp_{tbl}")

# ── 4. Pull the schema for *all* user tables in one query ─────────────────────
schema_df = con.execute("""
    SELECT
        table_name                    AS table,
        column_name                   AS column,
        data_type,
        ordinal_position AS col_order
    FROM information_schema.columns
    WHERE table_schema = 'main'       -- <- default schema for user objects
    ORDER BY table, col_order
""").df()

# ── 5. Show as plain text ─────────────────────────────────────────────────────
for tbl, group in schema_df.groupby("table", sort=False):
    print(f"\n=== {tbl} ===")
    for _, row in group.iterrows():
        print(f"{row['column']:>20} : {row['data_type']}")

# Optional: keep `schema_df` around if you prefer it in a DataFrame.
