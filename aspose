import jpype
import asposecells  # pip install aspose-cells

# -------- Start the JVM --------
jpype.startJVM(classpath=[asposecells.__jar__])     # JPype ≥ 1.4
from jpype import JImplements, JOverride           # decorators are faster than JProxy

from com.aspose.cells import LoadOptions, Workbook, MemorySetting

# -------- Implement the Java interface --------
@JImplements("com.aspose.cells.LightCellsDataHandler")
class MyHandler(object):

    # ---------- sheet ----------
    @JOverride
    def startSheet(self, sheet):
        return sheet.getName() == "Data"       # keep only the sheet we need

    # ---------- row (2 callbacks) ----------
    @JOverride
    def startRow(self, rowIndex):
        self.rowIdx = rowIndex                 # remember index for later
        return True                            # read row props → will call processRow

    @JOverride
    def processRow(self, row):                 # 'row' is com.aspose.cells.Row
        if row.isHidden():                     # skip hidden rows, for example
            return False                       # → skip every cell in this row
        return True                            # → walk through cells

    # ---------- cell (2 callbacks) ----------
    @JOverride
    def startCell(self, colIndex):
        return True                            # keep every cell (quick filter point)

    @JOverride
    def processCell(self, cell):               # 'cell' is com.aspose.cells.Cell
        print(self.rowIdx, cell.getColumn(), cell.getValue())
        return True

    # ---------- required no-op ends ----------
    def endRow(self):   return True
    def endSheet(self): return True

handler = MyHandler()          # JPype turns it into a Java proxy on instantiation

# -------- Configure streaming load --------
opts = LoadOptions()
opts.setLightCellsDataHandler(handler)
opts.setMemorySetting(MemorySetting.MEMORY_PREFERENCE)   # keep rows on disk
opts.setParseFormulaOnOpen(False)                        # skip formula parsing

# -------- Trigger parsing (streaming happens here) --------
Workbook("really_big.xlsx", opts)
jpype.shutdownJVM()



import jpype
from asposecells.api import Workbook, LoadOptions

# Define a handler class (no inheritance)
class MyCellHandler:
    def startSheet(self, sheet_index, cells):
        # Process only the first sheet
        return sheet_index == 0  
    
    def startRow(self, row_index, row):
        # Skip first 3 header rows
        return row_index >= 3  
    
    def processCell(self, column_index, cell):
        # Access cell value
        print(f"Row {cell.getRow()}, Col {column_index}: {cell.getStringValue()}")
        return True

# Start JVM (if not already running)
jpype.startJVM() 

# Create Java proxy for LightCellsDataHandler
LightCellsDataHandler = jpype.JClass("com.aspose.cells.LightCellsDataHandler")
handler_proxy = LightCellsDataHandler(MyCellHandler())

# Configure and load workbook
load_opt = LoadOptions()
load_opt.setLightCellsDataHandler(handler_proxy)
workbook = Workbook("large_file.xlsx", load_opt)  # Triggers streaming read

# Shutdown JVM when done
jpype.shutdownJVM()
