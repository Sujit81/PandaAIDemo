import json
import pandas as pd
from typing import Dict, Any
import duckdb
import google.generativeai as genai
from crewai import Agent, Task, Crew, Process

# Simple configuration
GEMINI_API_KEY = "your-gemini-api-key"
DB_CONNECTION = None

# Initialize Gemini
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-1.5-pro')

# Initialize DuckDB connection
def init_duckdb():
    """Initialize DuckDB connection"""
    global DB_CONNECTION
    DB_CONNECTION = duckdb.connect(':memory:')
    return DB_CONNECTION

def execute_query(query: str) -> str:
    """Execute SQL query and return results as JSON string"""
    global DB_CONNECTION
    try:
        result = DB_CONNECTION.execute(query).fetchall()
        columns = [desc[0] for desc in DB_CONNECTION.description]
        
        # Convert to simple format
        data = []
        for row in result:
            data.append(dict(zip(columns, row)))
        
        return json.dumps({
            "status": "success",
            "data": data,
            "row_count": len(data)
        })
    except Exception as e:
        return json.dumps({
            "status": "error",
            "error": str(e)
        })

def create_chart_from_data(data_str: str, chart_type: str = "bar") -> str:
    """Create a simple text representation of a chart"""
    try:
        data = json.loads(data_str)
        
        if data.get("status") == "error":
            return "Cannot create chart from error result"
        
        rows = data.get("data", [])
        if not rows:
            return "No data to visualize"
        
        # Simple text chart representation
        chart_text = f"\n{chart_type.upper()} CHART:\n"
        chart_text += "="*40 + "\n"
        
        # Get first two columns for simple visualization
        if rows and len(rows[0]) >= 2:
            keys = list(rows[0].keys())
            for row in rows[:10]:  # Limit to 10 rows
                label = str(row[keys[0]])
                value = row[keys[1]]
                if isinstance(value, (int, float)):
                    bar_length = int(value / 10) if value > 0 else 0
                    chart_text += f"{label:15} | {'#' * bar_length} {value}\n"
                else:
                    chart_text += f"{label:15} | {value}\n"
        
        chart_text += "="*40
        return chart_text
        
    except Exception as e:
        return f"Error creating chart: {str(e)}"

def summarize_data(data_str: str, context: str = "") -> str:
    """Create a summary using Gemini"""
    try:
        data = json.loads(data_str)
        
        if data.get("status") == "error":
            return "Cannot summarize error result"
        
        rows = data.get("data", [])
        if not rows:
            return "No data to summarize"
        
        # Create prompt for Gemini
        prompt = f"""
        Summarize this data:
        Context: {context}
        Data (first 5 rows): {json.dumps(rows[:5], indent=2)}
        Total rows: {len(rows)}
        
        Provide a brief, insightful summary.
        """
        
        response = gemini_model.generate_content(prompt)
        return response.text
        
    except Exception as e:
        return f"Error in summarization: {str(e)}"

def format_table(data: list) -> str:
    """Format data as a table string"""
    if not data:
        return "No data available"
    
    df = pd.DataFrame(data)
    return df.to_string(index=False)

class MinimalNLToSQLSystem:
    def __init__(self):
        """Initialize the minimal system"""
        self.db = init_duckdb()
        # Define available tools for Gemini
        self.available_tools = [
            {"name": "execute_query", "description": "Executes SQL queries and returns results"},
            {"name": "create_chart_from_data", "description": "Creates text-based visualizations from query results"},
            {"name": "summarize_data", "description": "Generates text summaries from query results"}
        ]
        
    def load_data(self, dataframes: Dict[str, pd.DataFrame]):
        """Load dataframes into DuckDB"""
        for table_name, df in dataframes.items():
            # Register DataFrame as a table
            self.db.register(table_name, df)
            print(f"Loaded table: {table_name} with {len(df)} rows")
    
    def generate_sql(self, natural_query: str) -> Dict[str, Any]:
        """Generate SQL from natural language with tool information"""
        # Get table information
        tables = self.db.execute("SHOW TABLES").fetchall()
        schema_info = "Available tables:\n"
        
        for table in tables:
            table_name = table[0]
            schema_info += f"\nTable: {table_name}\n"
            columns = self.db.execute(f"PRAGMA table_info({table_name})").fetchall()
            for col in columns:
                schema_info += f"  - {col[1]} ({col[2]})\n"
        
        # Create prompt with tool information
        tools_info = "\nAvailable Tools:\n" + "\n".join(
            [f"- {tool['name']}: {tool['description']}" for tool in self.available_tools]
        )
        
        prompt = f"""
        Convert this natural language query to SQL and specify which tools are needed for post-processing.
        Return your response as a JSON object with these keys:
        - "sql": the SQL query string
        - "tools": list of required tool names (e.g., ["execute_query", "create_chart_from_data"])
        - "errors": null or error message if any
        
        Query: {natural_query}
        
        {schema_info}
        {tools_info}
        
        Example Response:
        {{
          "sql": "SELECT product, SUM(revenue) FROM sales GROUP BY product",
          "tools": ["execute_query", "create_chart_from_data"],
          "errors": null
        }}
        """
        
        try:
            response = gemini_model.generate_content(prompt)
            # Extract JSON content
            json_str = response.text.strip().replace('```json', '').replace('```', '').strip()
            return json.loads(json_str)
        except Exception as e:
            return {
                "sql": "",
                "tools": [],
                "errors": f"Error generating SQL: {str(e)}"
            }
    
    def process_query(self, natural_query: str) -> Dict[str, Any]:
        """Process a natural language query"""
        # Generate SQL with tool information
        sql_info = self.generate_sql(natural_query)
        
        if sql_info.get("errors"):
            return {
                "status": "error",
                "error": sql_info["errors"]
            }
        
        # Execute SQL
        if "execute_query" not in sql_info["tools"]:
            sql_info["tools"].append("execute_query")  # Always include execute_query
        
        query_result = execute_query(sql_info['sql'])
        results = {
            "sql": sql_info['sql'],
            "tools": sql_info["tools"],
            "query_result": query_result
        }
        
        # Process results
        try:
            data_json = json.loads(query_result)
            
            # Format table for display
            if data_json.get("status") == "success":
                results["table"] = format_table(data_json["data"])
            else:
                results["table"] = f"Error: {data_json.get('error', 'Unknown error')}"
            
            # Create chart if requested
            if "create_chart_from_data" in sql_info["tools"]:
                results["chart"] = create_chart_from_data(query_result, "bar")
            
            # Create summary if requested
            if "summarize_data" in sql_info["tools"]:
                results["summary"] = summarize_data(query_result, natural_query)
            
            return {
                "status": "success",
                "results": results
            }
            
        except Exception as e:
            return {
                "status": "error",
                "error": str(e)
            }

# Test the minimal system
def test_minimal_system():
    """Test the minimal implementation"""
    
    # Create system
    system = MinimalNLToSQLSystem()
    
    # Create sample data
    sales_df = pd.DataFrame({
        'product': ['Laptop', 'Mouse', 'Keyboard', 'Monitor', 'Headphones'],
        'quantity': [10, 25, 15, 8, 12],
        'revenue': [9990, 625, 1125, 2392, 1188]
    })
    
    products_df = pd.DataFrame({
        'name': ['Laptop', 'Mouse', 'Keyboard', 'Monitor', 'Headphones'],
        'price': [999, 25, 75, 299, 99],
        'category': ['Electronics', 'Accessories', 'Accessories', 'Electronics', 'Audio']
    })
    
    # Load data
    print("Loading sample data...")
    system.load_data({
        'sales': sales_df,
        'products': products_df
    })
    
    # Test queries
    queries = [
        "Show me total revenue by product",
        "Create a chart showing quantities sold",
        "Summarize the sales data"
    ]
    
    for query in queries:
        print(f"\n{'='*60}")
        print(f"QUERY: {query}")
        print('='*60)
        
        result = system.process_query(query)
        
        if result['status'] == 'success':
            res = result['results']
            
            # Print SQL
            print(f"\nSQL GENERATED:\n{res['sql']}")
            
            # Print tools
            print(f"\nTOOLS SELECTED: {', '.join(res['tools'])}")
            
            # Print table
            print(f"\nQUERY RESULTS:\n{res['table']}")
            
            # Print chart if available
            if 'chart' in res:
                print(f"\n{res['chart']}")
            
            # Print summary if available
            if 'summary' in res:
                print(f"\nSUMMARY:\n{res['summary']}")
                
        else:
            print(f"ERROR: {result['error']}")
        
        print("\n" + "="*60)

if __name__ == "__main__":
    test_minimal_system()
