Project structure:
pgsql
Copy
Edit
â”œâ”€â”€ controller
â”‚   â””â”€â”€ UserController.java
â”œâ”€â”€ dto
â”‚   â””â”€â”€ UserRequest.java
â”œâ”€â”€ entity
â”‚   â””â”€â”€ User.java
â”œâ”€â”€ repository
â”‚   â””â”€â”€ UserRepository.java
â”œâ”€â”€ service
â”‚   â””â”€â”€ UserService.java
â””â”€â”€ exception
    â””â”€â”€ CustomExceptionHandler.java
âœ… 1. Request DTO
dto/UserRequest.java

java
Copy
Edit
package com.example.demo.dto;

import lombok.Data;

@Data
public class UserRequest {
    private String soeid; // comma-separated
    private String geid;  // comma-separated
}
âœ… 2. UserController (Updated for POST request)
controller/UserController.java

java
Copy
Edit
package com.example.demo.controller;

import com.example.demo.dto.UserRequest;
import com.example.demo.entity.User;
import com.example.demo.service.UserService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/users")
@RequiredArgsConstructor
public class UserController {

    private final UserService userService;

    @PostMapping
    public ResponseEntity<List<User>> getUsers(@RequestBody UserRequest request) {
        List<User> users = userService.fetchUsers(request.getSoeid(), request.getGeid());
        return ResponseEntity.ok(users);
    }
}
âœ… 3. UserService (Unchanged from previous)
service/UserService.java

java
Copy
Edit
package com.example.demo.service;

import com.example.demo.entity.User;
import com.example.demo.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;

import java.util.List;

@Service
@RequiredArgsConstructor
public class UserService {

    private final UserRepository userRepository;

    public List<User> fetchUsers(String soeid, String geid) {
        if (!StringUtils.hasText(soeid) && !StringUtils.hasText(geid)) {
            throw new IllegalArgumentException("At least one parameter (soeid or geid) must be provided");
        }

        if (StringUtils.hasText(soeid) && StringUtils.hasText(geid)) {
            throw new IllegalArgumentException("Only one parameter (soeid or geid) should be provided at a time");
        }

        return userRepository.getUsersByProcedure(soeid, geid);
    }
}
âœ… 4. UserRepository (Unchanged)
repository/UserRepository.java

java
Copy
Edit
package com.example.demo.repository;

import com.example.demo.entity.User;
import jakarta.persistence.EntityManager;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.StoredProcedureQuery;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
@RequiredArgsConstructor
public class UserRepository {

    private final EntityManager entityManager;

    public List<User> getUsersByProcedure(String soeid, String geid) {
        StoredProcedureQuery query = entityManager.createStoredProcedureQuery("sp_get_users", User.class);

        query.registerStoredProcedureParameter("soeid", String.class, ParameterMode.IN);
        query.registerStoredProcedureParameter("geid", String.class, ParameterMode.IN);

        query.setParameter("soeid", soeid);
        query.setParameter("geid", geid);

        return query.getResultList();
    }
}
âœ… 5. Entity and Exception Handling
entity/User.java and exception/CustomExceptionHandler.java remain unchanged from the original response.

ðŸ“Œ Example Usage
Request (POST):
http
Copy
Edit
POST http://localhost:8080/api/users
Content-Type: application/json

{
  "soeid": "123,456",
  "geid": null
}
or

json
Copy
Edit
{
  "soeid": null,
  "geid": "G123,G456"
}
Response (JSON):
json
Copy
Edit
[
  {
    "id": "123",
    "name": "John Doe",
    "email": "john@example.com",
    "managerId": "789",
    "department": "HR",
    "role": "Manager",
    "location": "NY",
    "phone": "1234567890",
    "status": "Active",
    "createdDate": "2023-04-22"
  },
  {
    "id": "456",
    "name": "Jane Doe",
    "email": "jane@example.com",
    "managerId": "789",
    "department": "Finance",
    "role": "Analyst",
    "location": "LA",
    "phone": "0987654321",
    "status": "Active",
    "createdDate": "2023-03-15"
  }
]
ðŸ“Œ Error Handling:
If both or neither parameters provided, you'll receive:

json
Copy
Edit
{
  "error": "Only one parameter (soeid or geid) should be provided at a time"
}
or

json
Copy
Edit
{
  "error": "At least one parameter (soeid or geid) must be provided"
}
âœ… Explanation of changes:
The endpoint now correctly accepts parameters via a POST request body.

DTO (UserRequest) ensures clear mapping of input parameters.

Lombok annotations simplify code by reducing boilerplate.

Proper validation and comprehensive error handling through custom exception handler.

Output remains structured JSON as required.

This gives you a clear, concise, and robust Spring Boot solution for calling your Oracle stored procedure using a POST request.


package com.example.demo.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.AllArgsConstructor;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    private String id;
    private String name;
    private String email;
    private String managerId;
    private String department;
    private String role;
    private String location;
    private String phone;
    private String status;
    private String createdDate;
}


package com.example.demo.exception;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;
import java.util.HashMap;
import java.util.Map;

@RestControllerAdvice
public class CustomExceptionHandler {

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<Map<String, String>> handleIllegalArgument(IllegalArgumentException ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", ex.getMessage());
        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<Map<String, String>> handleGeneralException(Exception ex) {
        Map<String, String> error = new HashMap<>();
        error.put("error", "Internal Server Error");
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}
