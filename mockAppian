<dependency>
    <groupId>org.mock-server</groupId>
    <artifactId>mockserver-netty</artifactId>
    <version>5.15.0</version><!-- latest stable on Maven Central -->
    <scope>test</scope>
</dependency>

<dependency>
    <groupId>org.junit.jupiter</groupId>
    <artifactId>junit-jupiter</artifactId>
    <version>5.10.2</version>
    <scope>test</scope>
</dependency>


package demo;

import org.mockserver.integration.ClientAndServer;
import org.mockserver.model.BinaryBody;
import org.mockserver.model.HttpRequest;
import org.mockserver.model.HttpResponse;

import org.junit.jupiter.api.*;

import javax.net.ssl.*;
import java.net.URI;
import java.net.http.*;
import java.nio.file.*;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;

import static org.junit.jupiter.api.Assertions.*;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class FileDownloadTest {

    private static final int HTTPS_PORT = 9443;
    private ClientAndServer mock;

    @BeforeAll
    void startServer() throws Exception {
        mock = ClientAndServer.startClientAndServer(HTTPS_PORT);

        byte[] file = Files.readAllBytes(Paths.get(
                "src/test/resources/report.xlsx"));

        mock.when(
                HttpRequest.request()
                           .withSecure(true)          // match HTTPS only
                           .withMethod("GET")
                           .withPath("/files/report"))
            .respond(
                HttpResponse.response()
                            .withStatusCode(200)
                            .withHeader("Content-Type",
                                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                            .withBody(BinaryBody.binary(file)));
    }

    @AfterAll
    void stopServer() {
        mock.stop();
    }

    @Test
    void downloadsFile_overHttps() throws Exception {
        SSLContext trustAll = trustEverything();
        HttpClient client = HttpClient.newBuilder()
                                      .sslContext(trustAll)
                                      .build();

        HttpRequest req = HttpRequest.newBuilder(
                URI.create("https://localhost:" + HTTPS_PORT + "/files/report"))
                .build();

        HttpResponse<byte[]> res =
                client.send(req, HttpResponse.BodyHandlers.ofByteArray());

        assertEquals(200, res.statusCode());
        assertTrue(res.body().length > 0, "file bytes must be returned");
    }

    /** Test-only “trust-all” SSLContext. Never use in production. */
    private static SSLContext trustEverything() throws Exception {
        TrustManager[] tm = { new X509TrustManager() {
            public void checkClientTrusted(X509Certificate[] c, String a) {}
            public void checkServerTrusted(X509Certificate[] c, String a) {}
            public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }
        }};
        SSLContext ctx = SSLContext.getInstance("TLS");
        ctx.init(null, tm, new SecureRandom());
        return ctx;
    }
}
