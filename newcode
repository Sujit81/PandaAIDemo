import org.apache.hc.client5.http.impl.classic.CloseableHttpClient;
import org.apache.hc.client5.http.impl.classic.HttpClients;
import org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;
import org.apache.hc.client5.http.ssl.DefaultClientTlsStrategy;
import org.apache.hc.core5.ssl.SSLContexts;
import org.apache.hc.core5.ssl.TrustAllStrategy;
import javax.net.ssl.SSLContext;

public class TrustAllExample {
    public static void main(String[] args) throws Exception {
        // 1. Configure SSLContext to trust all certificates
        SSLContext sslContext = SSLContexts.custom()
            .loadTrustMaterial(new TrustAllStrategy())
            .build();

        // 2. Create TLS strategy with disabled hostname verification
        TlsStrategy tlsStrategy = DefaultClientTlsStrategy.builder()
            .setSslContext(sslContext)
            .setHostnameVerifier((hostname, session) -> true) // Trust all hostnames
            .build();

        // 3. Build connection manager with the TLS strategy
        PoolingHttpClientConnectionManager connectionManager = PoolingHttpClientConnectionManagerBuilder.create()
            .setTlsStrategy(tlsStrategy)
            .build();

        // 4. Build the HTTP client
        try (CloseableHttpClient httpClient = HttpClients.custom()
            .setConnectionManager(connectionManager)
            .build()) {

            // Use the client to make requests (INSECURE!)
            // Example: httpClient.execute(new HttpGet("https://untrusted-server.com"));
        }
    }
}
